Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії








ЗВІТ
з практичної роботи №1
з дисципліни: «Аналіз та рефакторинг коду»








Виконав
ст. гр. ПЗПІ-23-4
Лінник Нікіта Анатолійович




Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2025
1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	23.10.2025
	1
	Створено розділ «Завдання»
	2
	23.10.2025
	1
	Створено розділ «Хід роботи»
	3
	23.10.2025
	1
	Створено розділ «Висновки»
	4
	23.10.2025
	1
	Створено розділ «Додаток А»
	5
	23.10.2025
	1
	Створено розділ «Додаток Б»
	

2 ЗАВДАННЯ
Обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.


3 ХІД РОБОТИ
JavaScript - одна з найбільш поширених мов програмування у світі. Спочатку вона створювалася як інструмент для “оживлення” веб-сторінок, але сьогодні застосовується набагато ширше: у фронтенді (React, Vue, Angular), у бекенді (Node.js), мобільних додатках (React Native) та навіть у розробці десктопних програм.
        Коли програми стають більшими, найважливішим стає не стільки швидкість написання коду, скільки його читабельність, якість та можливість підтримки. Саме про це говорив Мартін Фаулер у книзі “Refactoring”. Він підкреслює: головна мета рефакторингу полягає у створенні коду, який легко змінювати, тому що більшість життєвого циклу програмного продукту - це саме зміни та доопрацювання.
        У цій доповіді буде наведено 10 основних рекомендацій написання коду на JavaScript.

3.2 ОСНОВНІ РЕКОМЕНДАЦІЇ
3.2.1 Використання зрозумілих та осмислених імен змінних, функцій і класів
* Чому важливо для JavaScript: мова динамічно типізована, тобто змінна може змінювати свій тип у процесі виконання. Без чіткої назви важко зрозуміти, що вона зберігає. У строготипізованих мовах (Java, C#) тип частково дає підказку, а в JS — тільки ім’я.
* Наслідки недотримання: розробник, що читає код, витрачатиме більше часу на його аналіз, можлива плутанина між однаковими змінними з різним значенням. Це збільшує ризик помилок і ускладнює налагодження.
* Вплив на підтримку: зрозумілі назви дозволяють швидко орієнтуватися у коді навіть через кілька місяців або років, що зменшує витрати часу на підтримку.
* Приклад:
/JavaScript/
        // Поганий приклад
let d = 5;
function pr(a, b) { return a * b; }
// Гарний приклад
let daysInWeek = 7;
function calculateArea(width, height) { return width * height; }


3.2.2 Дотримання принципу єдиної відповідальності для функцій і модулів
* Чому важливо для JavaScript: JS часто використовують у фронтенді та бекенді, де функції легко переростають у «моноліти», що виконують одразу кілька завдань. У середовищах, як-от Node.js чи React, це робить тестування та перевикористання складним.
* Наслідки недотримання: зміни в одній частині функції можуть зламати інші. У тестуванні складно охопити всі сценарії. Код стає крихким.
* Вплив на підтримку: розділення відповідальності спрощує масштабування і дозволяє іншим розробникам швидко знаходити потрібну логіку.
* Приклад:
/JavaScript/
        // Поганий приклад
function processUser(user) {
    console.log("User:", user.name);
    saveToDatabase(user);
    sendEmail(user.email);
}


// Гарний приклад
function logUser(user) { console.log("User:", user.name); }
function saveUser(user) { saveToDatabase(user); }
function notifyUser(user) { sendEmail(user.email); }








3.2.3 Правила написання коментарів
* Чому важливо для JavaScript: у JS є кілька підходів до вирішення однієї задачі (функціональний, об’єктно-орієнтований, асинхронний). Без пояснень складно зрозуміти, чому був вибраний саме цей спосіб.
* Наслідки недотримання: розробник може переписати ділянку коду на інший спосіб, не знаючи, що поточне рішення оптимізоване, наприклад, під продуктивність. Це призведе до втрати ефективності або появи помилок.
* Вплив на підтримку: правильно написані коментарі зберігають знання, роблять код самодостатнім і зрозумілим незалежно від того, хто його підтримує.
* Приклад:
/JavaScript/
        // Поганий приклад
        let x = 10; // Змінна x дорівнює 10


// Гарний приклад
// Використовуємо множення замість Math.pow для швидкодії
let squared = num * num;


3.2.4 Уникнення дублювання коду (принцип DRY)
* Чому важливо для JavaScript: мова часто використовується для роботи з DOM, подіями або API, де однакові дії можуть повторюватися у різних місцях. Дублювання призводить до надмірності.
* Наслідки недотримання: якщо потрібно змінити логіку, доведеться правити код у кількох місцях. Великий ризик, що одну з копій забудуть оновити, і програма почне працювати некоректно.
* Вплив на підтримку: винесення повторюваної логіки в окремі функції чи модулі робить проєкт більш стабільним і простим у розширенні.
* Приклад:
/JavaScript/
        // Поганий приклад
if (age < 18) { console.log("Too young"); }
if (userAge < 18) { console.log("Too young"); }


// Гарний приклад
function checkAge(age) {
    if (age < 18) console.log("Too young");
}
checkAge(age);
checkAge(userAge);


3.2.5 Написання зрозумілих і коротких функцій
* Чому важливо для JavaScript: оскільки JS активно використовує callback-и, проміси й async/await, довгі функції з вкладеними рівнями створюють так званий «callback hell». Це робить код практично нечитаємим.
* Наслідки недотримання: складно зрозуміти потік виконання, а будь-яка помилка призведе до серйозних проблем у налагодженні.
* Вплив на підтримку: короткі функції легше тестувати, перевикористовувати та розширювати. Вони знижують когнітивне навантаження на програміста
* Приклад:
/JavaScript/
        // Поганий приклад
function processData(data) {
    for (let i = 0; i < data.length; i++) {
        if (data[i].active) {
            console.log(data[i].name);
            // ще 20 рядків
        }
    }
}


// Гарний приклад
function isActive(item) { return item.active; }
function logName(item) { console.log(item.name); }
data.filter(isActive).forEach(logName);


3.2.6 Документування коду та коментарі для складних ділянок
* Чому важливо для JavaScript: у великих проєктах часто використовуються сторонні бібліотеки, складні асинхронні операції або специфічні алгоритми. Без документації важко зрозуміти, як усе працює разом.
* Наслідки недотримання: майбутні розробники змушені витрачати багато часу на «зворотне інженерування» — розбиратися у чужому коді без підказок. Це сповільнює розвиток проєкту.
* Вплив на підтримку: документація полегшує входження нових учасників команди, забезпечує єдиний підхід до роботи з кодом.
* Приклад:
/JavaScript/
        /**
 * Обчислює середній бал студента
 * @param {number[]} grades - Масив оцінок
 * @returns {number} - Середнє значення
 */
function calculateAverage(grades) {
    return grades.reduce((a, b) => a + b, 0) / grades.length;
}


3.2.7 Використання структур і патернів проєктування там, де це доцільно
* Чому важливо для JavaScript: завдяки гнучкій природі JS легко писати код «без структури». Це зручно для маленьких скриптів, але у великих застосунках призводить до хаосу. Патерни, як-от Singleton, Observer чи Factory, упорядковують проєкт.
* Наслідки недотримання: архітектура проєкту стає непередбачуваною, код важко розширювати та тестувати. Виникає залежність від конкретних реалізацій.
* Вплив на підтримку: використання патернів робить код зрозумілим і передбачуваним для всієї команди, навіть якщо змінюється склад розробників.
* Приклад:
/JavaScript/
        // Singleton для керування налаштуваннями
class Settings {
  constructor() {
    if (Settings.instance) return Settings.instance;
    this.theme = "dark";
    Settings.instance = this;
  }
}


3.2.8 Використання автоматизованого тестування та перевірка коректності коду
* Чому важливо для JavaScript: через динамічну типізацію багато помилок проявляються тільки під час виконання. Тести допомагають виявити їх ще до релізу.
* Наслідки недотримання: баги з’являються вже в роботі додатку, що може призвести до фінансових втрат або проблем із користувачами.
* Вплив на підтримку: наявність тестів дозволяє впевнено змінювати код, знаючи, що система залишиться стабільною. Це підвищує якість продукту та знижує витрати на виправлення помилок.
* Приклад:
/JavaScript/
        test('adds 1 + 2 to equal 3', () => {
  expect(1 + 2).toBe(3);
});


3.2.9 Використання принципів чистого коду (Clean Code)
* Чому важливо для JavaScript: JavaScript дуже гнучкий — у ньому можна писати і швидкі скрипти, і великі застосунки. Через це легко створити код, який працює, але абсолютно нечитаємий. Принципи чистого коду (зрозумілі імена, мінімум побічних ефектів, уникання зайвої складності) дозволяють підтримувати ясність і порядок у проєкті.
* Наслідки недотримання: Без уваги до якості код поступово перетворюється на «спагеті-код», у якому неможливо орієнтуватися. Кожна зміна може зламати інші частини системи, зростає кількість помилок, а швидкість розробки падає.
* Вплив на підтримку: Дотримання принципів чистого коду робить проєкт зрозумілим для будь-якого розробника, навіть якщо він ніколи не працював з цим кодом раніше. Це спрощує колективну роботу, прискорює оновлення функціоналу і знижує ризики при масштабуванні системи.






3.2.10 Поступове вдосконалення й рефакторинг існуючого коду
* Чому важливо для JavaScript: JS часто використовують для швидкої розробки MVP, прототипів. У такому коді можуть бути компроміси, які з часом стають проблемами. Регулярний рефакторинг дозволяє підтримувати проєкт у хорошому стані.
* Наслідки недотримання: накопичується «технічний борг», код стає важким для розуміння, зміни призводять до все більшої кількості помилок. У результаті дешевше переписати систему з нуля.
* Вплив на підтримку: регулярний рефакторинг зберігає якість проєкту, робить його готовим до довготривалого розвитку й адаптації під нові вимоги.
* Приклад:
/JavaScript/
        // Початковий код
function getUsersNames(users) {
    let result = [];
    for (let i = 0; i < users.length; i++) {
        result.push(users[i].name);
    }
    return result;
}


// Після рефакторингу
const getUsersNames = users => users.map(u => u.name);




4 ВИСНОВКИ
Дотримання базових рекомендацій під час написання коду є важливим не лише для створення робочої програми, а й для забезпечення її зрозумілості, надійності та довгострокової підтримки. Запропоновані правила спрямовані на те, щоб зробити код більш структурованим, передбачуваним і легким у сприйнятті як для автора, так і для інших розробників.


5 ВИКОРИСТАНІ ДЖЕРЕЛА
        1. JavaScript Standard Style. URL: https://standardjs.com/ (дата зверення: 23.10.2025).
        2. Martin R. C. Clean Code: A Handbook of Agile Software Craftsmanship. 2009. 464 с.
        




























ДОДАТОК А
Відео-посилання на YouTube: https://youtu.be/srIbxHLumZ4
































ДОДАТОК Б
Скріншоти з презентації:
  

Рисунок Б.1 - Титульний лист


  

Рисунок Б.2 - Вступ


  

Рисунок Б.3 - Використання зрозумілих та осмислених імен


  

Рисунок Б.4 - Дотримання принципу єдиної відповідальності


  

Рисунок Б.5 - Правила написання коментарів


  

Рисунок Б.6 - Уникнення дублювання коду (DRY)


  

Рисунок Б.7 - Написання зрозумілих і коротких функцій


  

Рисунок Б.8 - Документування коду та коментарі для складних ділянок


  

Рисунок Б.9 - Використання структур і патернів проєктування


  

Рисунок Б.10 - Використання автоматизованого тестування та перевірка коректності коду


  

Рисунок Б.11 - Використання принципів чистого коду (Clean Code)


  

Рисунок Б.12 - Поступове вдосконалення й рефакторинг існуючого коду
  

Рисунок Б.13 - Список використаних джерел